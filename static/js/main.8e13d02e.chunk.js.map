{"version":3,"sources":["components/UserList.js","components/List.js","App.js","index.js"],"names":["UserList","props","toDos","list","map","item","i","key","onClick","console","log","del","List","state","userInput","this","changeHandel","e","setState","target","value","trim","add","preventDefault","userText","remove","itemToRemove","newArr","filter","Fragment","onSubmit","type","onChange","placeholder","React","Component","fileData","obj","id","name","address","headerStyle","backgroundColor","color","App","className","style","reactDOM","render","StrictMode","document","getElementById"],"mappings":"oNAoCeA,EAlCE,SAACC,GAiBhB,IAAMC,EAAQD,EAAME,KAAKC,KAAI,SAACC,EAAMC,GAAP,OAC3B,wBAAIC,IAAKD,GACND,EAAM,IACP,uBACEG,QAAS,WACPC,QAAQC,IAAIL,GAEZJ,EAAMU,IAAIN,KAJd,oBAWJ,OAAO,4BAAKH,IC7BOU,E,kDAGnB,WAAYX,GAAQ,IAAD,8BAGjB,cAAMA,IAIDY,MAAQ,CACXC,UAAW,GACXX,KAAM,IATS,E,qDAaT,IAAD,OA2CP,OAzCAY,KAAKC,aAAe,SAACC,GAEnB,EAAKC,SAAS,CAAEJ,UAAWG,EAAEE,OAAOC,MAAMC,SAC1CZ,QAAQC,IAAIO,EAAEE,OAAOC,QAevBL,KAAKO,IAAM,SAACL,GACVA,EAAEM,iBACF,IAAMC,EAAW,EAAKX,MAAMC,UAE5B,EAAKI,SAAS,CACZJ,UAAW,GACXX,KAAK,GAAD,mBAAM,EAAKU,MAAMV,MAAjB,CAAuBqB,OAO/BT,KAAKU,OAAS,SAACC,GACb,IAAMC,EAAS,EAAKd,MAAMV,KAAKyB,QAAO,SAACvB,GAAD,OAAUA,IAASqB,KACzDjB,QAAQC,IAAIiB,GACZ,EAAKT,SAAS,CACZf,KAAMwB,KAOR,kBAAC,IAAME,SAAP,KACE,0BAAMC,SAAUf,KAAKO,KACnB,2BACES,KAAK,OACLX,MAAOL,KAAKF,MAAMC,UAGlBkB,SAAUjB,KAAKC,aACfiB,YAAY,mBAEd,2BAAOF,KAAK,SAASX,MAAM,SAE7B,kBAAC,EAAD,CAAUjB,KAAMY,KAAKF,MAAMV,KAAMQ,IAAKI,KAAKU,c,GAxEjBS,IAAMC,WCMlCC,E,KAAgBhC,KAAI,SAACiC,GAAS,IAC1BC,EAAsBD,EAAtBC,GAAIC,EAAkBF,EAAlBE,KAAMC,EAAYH,EAAZG,QAElB,OACE,wBAAIjC,IAAK+B,GAAT,YACYC,EADZ,mBACkCC,MAMhCC,EAAc,CAClBC,gBAAiB,MACjBC,MAAO,SAGYC,E,uKAEjB,OACE,kBAAC,IAAMf,SAAP,KACE,wBAAIgB,UAAU,SAASC,MAAOL,GAA9B,SAYA,wBAAIK,MAAO,CAAEJ,gBAAiB,MAAOC,MAAO,UAA5C,aAECP,EACD,kBAAC,EAAD,W,GAnByBF,IAAMC,WCrBvCY,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.8e13d02e.chunk.js","sourcesContent":["import React from \"react\";\n// here you are receiving the properties/props from the List.js\nconst UserList = (props) => {\n  // this line props.list.map , correspond to the list, the name of what i am using in props in List.js\n  /*\n      constructor(props) {\n    //   constructor is where i initialize what i will use\n    // the 'super' is going to take anything super important from 'props' and pass it\n    super(props);\n    // State is GOING to automatically refresh THE RENDER and getting the new update whenever I change the STATE\n    // TO use the state, you can use 'this.' as this represent what you are currently building\n    //\n    this.state = {\n      userInput: \"\", //the user input field with an empty field ''\n      list: \"\", //  this is the list array, its build based on what the user will type inside the userInput\n    };\n    //\n  }\n*/\n  const toDos = props.list.map((item, i) => (\n    <li key={i}>\n      {item}{\" \"}\n      <i\n        onClick={() => {\n          console.log(item);\n\n          props.del(item); //the fake function calling from the parent List.js\n        }}\n      >\n        ðŸ—‘\n      </i>\n    </li>\n  ));\n  return <ul>{toDos}</ul>;\n};\n\nexport default UserList;\n","// 1\nimport React from \"react\";\nimport UserList from \"./UserList\";\n// 2\nexport default class List extends React.Component {\n  // 3 inside the constructor you need to pass the \"props\" like an argument.\n  // always when you will use a \"constructor\", you will use the 'super'.\n  constructor(props) {\n    //   constructor is where i initialize what i will use\n    // the 'super' is going to take anything super important from 'props' and pass it\n    super(props);\n    // State is GOING to automatically refresh THE RENDER and getting the new update whenever I change the STATE\n    // TO use the state, you can use 'this.' as this represent what you are currently building\n    //\n    this.state = {\n      userInput: \"\", //the user input field with an empty field ''\n      list: [], //  this is the list array, its build based on what the user will type inside the userInput\n    };\n    //\n  }\n  render() {\n    //\n    this.changeHandel = (e) => {\n      // setState : it will not immediately change, it will just check and then take the time and do the task\n      this.setState({ userInput: e.target.value.trim() });\n      console.log(e.target.value); //actual preview of what the user is  typing\n\n      //   so here i am changing the userInput and assigning a new value to it\n      /* \n    so what is the new value from  e.target.value.trim()? in event 'e' that contains this onChange={this.changeHandel} \n\n\n    */\n      /*The trim() method removes whitespace from both ends of a string. Whitespace in this context is all the whitespace characters (space, tab, no-break space, etc.) and all the line terminator characters (LF, CR, etc.).*/\n    };\n    //\n    // i can use a normal function here.\n    //  bind will make me add more lines of code to get the same result.\n    // bind, will help me to use the this. keyword when using the constructor, but its better to use this way to use less code.\n    //\n    this.add = (e) => {\n      e.preventDefault();\n      const userText = this.state.userInput;\n      //   with this update \"setState\" i want that after the user hit enter, the field is empty again\n      this.setState({\n        userInput: \"\", //empty field\n        list: [...this.state.list, userText], //here i tell that i want to keep the old array which is array, and i want to add things to it, got to the browser and test it to see what it does.\n      });\n    };\n    //\n    //-------\n    // fake function , i dont have the function in the child but i will call it there\n    // this is the way i pass the function to a child: del={this.remove}/> and then there i can use that function\n    this.remove = (itemToRemove) => {\n      const newArr = this.state.list.filter((item) => item !== itemToRemove);\n      console.log(newArr);\n      this.setState({\n        list: newArr,\n      });\n    };\n\n    //\n    // ------\n    return (\n      <React.Fragment>\n        <form onSubmit={this.add}>\n          <input\n            type=\"text\"\n            value={this.state.userInput}\n            // after creating the UserList.js and maping through the items, you will not\n            // be able to type anymore, so to prevent this, add a event handler onChange\n            onChange={this.changeHandel}\n            placeholder=\"type something\"\n          />\n          <input type=\"submit\" value=\"Add\" />\n        </form>\n        <UserList list={this.state.list} del={this.remove} />\n        {/* \n        -list has a child called UserList, this UserList is inside the UserList.js,\n        and there i am processing the view \n        \n        -the view dont know anything about the DATA,dont know what elements are inside of it\n        but what it knows is about the onClick on that element, i have that event i can register on click.\n\n        -the child cannot send data to the parent which is List.js but List.js can send to children but there\n        s a way to send small information to the parent by creating a fake function.\n        \n        \n        */}\n      </React.Fragment>\n    );\n  }\n}\n\n// to use the snippet:\n// imr : Import React\n// imrc : import react component\n// cc  : Class Component\n// ccc : Class Component With Constructor\n//  https://marketplace.visualstudio.com/items?itemName=burkeholland.simple-react-snippets\n","import React from \"react\";\n// YOu can do either this or that, this two lines go together\n// import React, { Component } from \"react\";\n// export default class App extends Component {\n//\nimport List from \"./components/List\";\nimport Data from \"./data.json\";\n//\n//the following is the afternoon lesson that will be related to the assignment tomorrow\n//DATABASE\nconst fileData = Data.map((obj) => {\n  const { id, name, address } = obj;\n  //\n  return (\n    <h4 key={id}>\n      Hey i am {name}, and I live in {address}\n    </h4>\n  );\n});\n//\n//this is another way to pass styles, check this line because its connected to it :   <h1 className=\"header\" style={{ headerStyle }}>\nconst headerStyle = {\n  backgroundColor: \"red\",\n  color: \"green\",\n};\n//\nexport default class App extends React.Component {\n  render() {\n    return (\n      <React.Fragment>\n        <h1 className=\"header\" style={headerStyle}>\n          HELLO\n        </h1>\n        {/* \n        -data base is different, here you set it up like this :  {fileData}   \n        \n        -this class here: export default class App extends React.Component {\n            is why i have to use className in the h1, so careful not to confuse them\n        \n        \n        */}\n\n        <h2 style={{ backgroundColor: \"red\", color: \"green\" }}> My Todo </h2>\n\n        {fileData}\n        <List />\n      </React.Fragment>\n    );\n  }\n}\n","import React from \"react\";\nimport reactDOM from \"react-dom\";\nimport \"./scss/main.scss\";\nimport App from \"./App\";\n\nreactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n// // if i want to use images, there are two things i should care\n//  there are images i need for production in the src folder and the images to public\n// images for content of the page will go inside the src /scss etc\n// images like favicon will go in public\n"],"sourceRoot":""}